// Proxy file generated for arithmetic

#include "arithmetic.idl"
#include "rpcproxyhelper.h"

using namespace std;
using namespace C150NETWORK;

int add(int x, int y) {
    string name = "add";
    RPCPROXYSOCKET->write(name.c_str(), name.length() + 1);

    char* arg0 = reinterpret_cast<char*>(&x);
    RPCPROXYSOCKET->write(arg0, sizeof(int));

    char* arg1 = reinterpret_cast<char*>(&y);
    RPCPROXYSOCKET->write(arg1, sizeof(int));

    char readBuffer[sizeof(int)];
    RPCPROXYSOCKET->read(readBuffer, sizeof(readBuffer));
    return *reinterpret_cast<int*>(readBuffer);
}

int divide(int x, int y) {
    string name = "divide";
    RPCPROXYSOCKET->write(name.c_str(), name.length() + 1);

    char* arg0 = reinterpret_cast<char*>(&x);
    RPCPROXYSOCKET->write(arg0, sizeof(int));

    char* arg1 = reinterpret_cast<char*>(&y);
    RPCPROXYSOCKET->write(arg1, sizeof(int));

    char readBuffer[sizeof(int)];
    RPCPROXYSOCKET->read(readBuffer, sizeof(readBuffer));
    return *reinterpret_cast<int*>(readBuffer);
}

int multiply(int x, int y) {
    string name = "multiply";
    RPCPROXYSOCKET->write(name.c_str(), name.length() + 1);

    char* arg0 = reinterpret_cast<char*>(&x);
    RPCPROXYSOCKET->write(arg0, sizeof(int));

    char* arg1 = reinterpret_cast<char*>(&y);
    RPCPROXYSOCKET->write(arg1, sizeof(int));

    char readBuffer[sizeof(int)];
    RPCPROXYSOCKET->read(readBuffer, sizeof(readBuffer));
    return *reinterpret_cast<int*>(readBuffer);
}

int subtract(int x, int y) {
    string name = "subtract";
    RPCPROXYSOCKET->write(name.c_str(), name.length() + 1);

    char* arg0 = reinterpret_cast<char*>(&x);
    RPCPROXYSOCKET->write(arg0, sizeof(int));

    char* arg1 = reinterpret_cast<char*>(&y);
    RPCPROXYSOCKET->write(arg1, sizeof(int));

    char readBuffer[sizeof(int)];
    RPCPROXYSOCKET->read(readBuffer, sizeof(readBuffer));
    return *reinterpret_cast<int*>(readBuffer);
}
