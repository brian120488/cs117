#!/bin/env python3

from parse_idl import *
from strings import *

# Function to generate proxy file content
def generate_proxy(idl_name, decls):
    proxy_code = [f"// Proxy file generated for {idl_name}\n"]
    proxy_code.append(f"#include \"{idl_name}.idl\"")
    proxy_code.append("#include \"rpcproxyhelper.h\"\n")
    proxy_code.append("using namespace std;")
    proxy_code.append("using namespace C150NETWORK;\n")

    for name, info in decls["functions"].items():
        proxy_code.append(proxy_function_header_string(name, info))
        proxy_code.append(send_function_string(name))
        
        # send arguments
        for i, arg in enumerate(info["arguments"]):
            proxy_code.append(send_arg_string(i, arg))
        
        # read output
        proxy_code.append(read_output_string(info))
        
        proxy_code.append("}\n")

    return "\n".join(proxy_code)

# Function to generate stub file content
def generate_stub(idl_name, decls):
    stub_code = [f"// Stub file generated for {idl_name}\n"]
    stub_code.append(f"#include \"{idl_name}.idl\"")
    stub_code.append('#include \"rpcstubhelper.h\"\n')
    stub_code.append("using namespace std;")
    stub_code.append("using namespace C150NETWORK;\n")

    stub_code.append(get_function_name_string())    

    for name, info in decls["functions"].items():
        stub_code.append(stub_function_header_string(name, info))
        stub_code.append(get_output_string(name, info))
        stub_code.append(send_output_string())
        stub_code.append("}\n")

    stub_code.append(dispatch_function_string())
    for name, info in decls["functions"].items():
        stub_code.append(dispatch_if_string(name, info))
    stub_code.append("    }\n}");
    return "\n".join(stub_code)

# Main function for the rpcgenerate script
def rpcgenerate(file_path):
    idl_name = os.path.splitext(os.path.basename(file_path))[0]
    decls = parse_idl(file_path)

    # Generate proxy and stub content
    proxy_content = generate_proxy(idl_name, decls)
    stub_content = generate_stub(idl_name, decls)

    # Write proxy file
    proxy_file = f"{idl_name}.proxy.cpp"
    with open(proxy_file, 'w') as file:
        file.write(proxy_content)
    print(f"Generated {proxy_file}")
    
    # Write stub file
    stub_file = f"{idl_name}.stub.cpp"
    with open(stub_file, 'w') as file:
        file.write(stub_content)
    print(f"Generated {stub_file}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: ./rpcgenerate <idl_file>")
        sys.exit(1)

    idl_file = sys.argv[1]
    rpcgenerate(idl_file)
